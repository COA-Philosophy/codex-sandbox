"use client";

import React from "react";
import { PHASES, Owner, PhaseId } from "@/types/structure";
import { StructureBoardPane } from "@/features/board/ui/StructureBoardPane";
import { DetailPanel } from "@/features/board/ui/components/DetailPanel";
import { DepGraphView } from "@/features/board/ui/components/DepGraphView";
import { TreeView } from "@/features/board/ui/components/TreeView";
import { KanbanBoard } from "@/features/board/ui/components/KanbanBoard";

/**
 * StructureBoard メインページ
 * 新しいアーキテクチャ: 状態管理は専用フックに分離、UIは StructureBoardPane に委譲
 */
export default function StructureBoardPage() {
  return (
    <StructureBoardPane
      Header={Header}
      HandoffBar={HandoffBar}
      Toolbar={Toolbar}
      KanbanBoard={KanbanBoard}
      TreeView={TreeView}
      DepGraphView={DepGraphView}
      ArchitecturePlaceholder={ArchitecturePlaceholder}
      DetailPanel={DetailPanel}
    />
  );
}

// === 既存コンポーネント定義 (一時的に残す、後でファイル分離予定) ===

function Header() {
  return (
    <div className="flex items-center justify-between">
      <div className="text-xl font-semibold tracking-wide">StructureBoard — Hybrid View</div>
      <div className="text-sm opacity-70">v2 · refactored</div>
    </div>
  );
}

function HandoffBar() {
  return (
    <div className="mt-3 rounded-3xl border border-neutral-800 bg-neutral-900/40 p-3">
      <div className="flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
        <div className="text-xs opacity-80">
          Last handoff: <b>(none)</b>
        </div>
        <div className="flex items-center gap-2">
          <button className="px-3 py-1.5 text-xs rounded-lg border border-neutral-700 hover:bg-neutral-800">
            Apply
          </button>
          <button className="px-3 py-1.5 text-xs rounded-lg border border-neutral-700 hover:bg-neutral-800">
            Save
          </button>
        </div>
      </div>
    </div>
  );
}

function Toolbar({
  q, setQ, ownerFilter, setOwnerFilter, phaseFilter, setPhaseFilter,
  tagUniverse, selectedTags, toggleTag, view, setView
}: {
  q: string; setQ: (v: string) => void;
  ownerFilter: Owner | "ALL"; setOwnerFilter: (o: Owner | "ALL") => void;
  phaseFilter: PhaseId | "ALL"; setPhaseFilter: (p: PhaseId | "ALL") => void;
  tagUniverse: string[]; selectedTags: string[]; toggleTag: (tg: string) => void;
  view: "kanban" | "tree" | "depgraph" | "architecture";
  setView: (v: "kanban" | "tree" | "depgraph" | "architecture") => void;
}) {
  const ViewButton = ({ v, label }: { v: typeof view; label: string }) => (
    <button
      onClick={() => setView(v)}
      className={`px-3 py-1.5 text-sm rounded-xl border border-neutral-800 ${
        view === v ? "bg-neutral-800" : "hover:bg-neutral-800/60"
      }`}
    >
      {label}
    </button>
  );

  return (
    <div className="rounded-3xl border border-neutral-800 bg-neutral-900/50 px-4 py-3 mt-3">
      <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
        <div className="flex items-center gap-2">
          <input
            value={q}
            onChange={(e) => setQ(e.target.value)}
            placeholder="Search (AND match: space-separated)"
            className="w-80 rounded-xl bg-neutral-950 border border-neutral-800 px-3 py-2 text-sm outline-none focus:border-neutral-600"
          />
          <select
            value={ownerFilter}
            onChange={(e) => setOwnerFilter(e.target.value as any)}
            className="rounded-xl bg-neutral-950 border border-neutral-800 px-2 py-2 text-sm"
          >
            <option value="ALL">Owner: All</option>
            <option value="HUMAN">Owner: Human</option>
            <option value="AI">Owner: AI</option>
          </select>
          <select
            value={phaseFilter}
            onChange={(e) => setPhaseFilter(e.target.value as any)}
            className="rounded-xl bg-neutral-950 border border-neutral-800 px-2 py-2 text-sm"
          >
            <option value="ALL">Phase: All</option>
            {PHASES.map((p) => (
              <option key={p.id} value={p.id}>{p.label}</option>
            ))}
          </select>
        </div>

        <div className="flex items-center gap-2">
          <ViewButton v="kanban" label="Kanban" />
          <ViewButton v="tree" label="Tree" />
          <ViewButton v="depgraph" label="DepGraph" />
          <ViewButton v="architecture" label="Architecture" />
        </div>
      </div>

      <div className="mt-3 flex flex-wrap gap-2">
        {tagUniverse.map((tg) => (
          <button
            key={tg}
            onClick={() => toggleTag(tg)}
            className={`px-2 py-1 text-xs rounded-lg border ${
              selectedTags.includes(tg) 
                ? "border-neutral-500 bg-neutral-800" 
                : "border-neutral-800 bg-neutral-950 hover:bg-neutral-900"
            }`}
          >
            #{tg}
          </button>
        ))}
      </div>
    </div>
  );
}

function ArchitecturePlaceholder() {
  return (
    <div className="rounded-3xl border border-neutral-800 bg-neutral-900/60 p-4">
      <div className="text-sm mb-2">Architecture View</div>
      <div className="text-xs opacity-70">System architecture diagram coming next...</div>
    </div>
  );
}